services:
  mongo:
    build: ./persistence
    image: 127.0.0.1:5000/mongo
    volumes:
     - ./persistence/init-scripts/init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    expose:
     - 27017
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet --username user --password password
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  redis:
    image: redis:latest
    volumes:
      - ./persistence/init-scripts/redis.conf:/usr/local/etc/redis/redis.conf
    entrypoint: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
    healthcheck:
      test: [ "CMD", "redis-cli", "--user", "coolusername123", "--pass", "coolpassword123", "ping" ]
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  kafka:
    image: apache/kafka:latest
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://localhost:9093,
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 1
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  frontend:
    build: ./frontend/
    image: 127.0.0.1:5000/frontend
    ports:
     - 80:80
    restart: always
    deploy:
      placement:
        constraints:
          - node.role == manager

  chatapp:
    build: .
    image: 127.0.0.1:5000/chatapp
    environment:
     - KAFKA_HOST=kafka:9092
     - REDIS_HOST=redis
     - MONGO_HOST=mongo
    restart: always
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == worker
